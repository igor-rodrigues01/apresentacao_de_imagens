L.Control["Switch"] = L.Control.extend({
  options: {
    collapsed: true,
    position: "topright",
    autoZIndex: true,
    enableTabs: false,
    miscTabsName: "Outros",
    removable: false,
    defaultLayer: true
  },

  initialize: function(baseLayers, overlayers, tabs, options) {
    L.Util.setOptions(this, options);

    this._layers = {};
    this._lastZIndex = 0;
    this._handlingClick = false;
    this._baseLayers = [];

    if (tabs && Object.keys(tabs).length) {
      this._tabs = tabs;
      this.options.enableTabs = true;
    }

    $.each(baseLayers, (function(_this) {
      return function(name, obj) {
        return _this._addLayer(obj.layer, name, false, false, null);
      };
    })(this));

    $.each(overlayers, (function(_this) {
      return function(name, obj) {
        var control;
        control = typeof obj.overlayControl === "boolean" ? obj.overlayControl : false;
        return _this._addLayer(obj.layer, name, true, control, obj.tab);
      };
    })(this));
  },

  onAdd: function(map) {
    this._initLayout();
    this._update();
    map.on("layeradd", this._onLayerChange, this).on("layerremove", this._onLayerChange, this);
    return this._container;
  },

  onRemove: function(map) {
    return map.off("layeradd", this._onLayerChange).off("layerremove", this._onLayerChange);
  },

  addBaseLayer: function(layer, name) {
    this._addLayer(layer, name);
    this._update();
    return this;
  },

  addOverLayer: function(layer, name, overlayControl, tab) {
    this._addLayer(layer, name, true, overlayControl, tab);
    this._update();
    return this;
  },

  removeLayer: function(layer) {
    var id;
    id = L.stamp(layer);
    delete this._layers[id];
    this._update();
    return this;
  },

  _initLayout: function() {
    var className, container, form, link, obj;
    className = "switch-control-layers";
    container = this._container = L.DomUtil.create("div", "leaflet-bar " + className);
    container.setAttribute('aria-haspopup', true);

    if (!L.Browser.touch) {
      L.DomEvent.disableClickPropagation(container);
      L.DomEvent.on(container, "mousewheel", L.DomEvent.stopPropagation);
    } else {
      L.DomEvent.on(container, "click", L.DomEvent.stopPropagation);
    }

    form = this._form = L.DomUtil.create("form", className + "-list form-layer-list");

    if (this.options.collapsed) {
      L.DomEvent.on(container, "mouseover", this._expand, this).on(container, "mouseout", this._collapse, this);
      link = this._layersLink = L.DomUtil.create("a", className + "-toggle", container);
      link.href = "#";
      link.title = "Layers";

      if (L.Browser.touch) {
        L.DomEvent.on(link, "click", L.DomEvent.stop).on(link, "click", this._activeTab, this).on(link, "click", this._expand, this);
      } else {
        L.DomEvent.on(link, "mouseover", this._activeTab, this).on(link, "focus", this._expand, this);
      }

      this._map.on("click", this._collapse, this);
    } else {
      this._expand();
    }

    this._baseLayersList = L.DomUtil.create('div', className + '-base' + ' base-padding', form);

    if (!this.options.enableTabs) {
      this._separator = L.DomUtil.create('div', className + '-separator', form);
    }

    this._overlayersList = L.DomUtil.create('div', className + '-overlayers', form);
    
    if (this.options.enableTabs) {
      this._tabsOverLayers = L.DomUtil.create('ul', 'nav nav-tabs', form);
      $(this._tabsOverLayers).attr('id', 'tabsOverLayers');
      this._tabsContentOverLayers = L.DomUtil.create('div', 'tab-content', form);
      $(this._tabsContentOverLayers).attr('id', 'tabsContent');
      this._tabsList = {};

      $.each(this._tabs, (function(_this) {
        return function(tab, obj) {
          _this._createTab(tab, obj);
          if (obj.tabs === void 0 && _this.options.defaultLayer) {
            return _this.options.miscTabs = true;
          }
        };
      })(this));

      if (this.options.miscTabs) {
        obj = {
          icon: '<span class="glyphicon glyphicon-plus"></span>'
        };
        this._createTab(this.options.miscTabsName, obj);
      }
    }

    return $(container).append(form);
  },

  _createTab: function(tab, obj) {
    var newTab, newTabContent, newTabName;
    newTab = L.DomUtil.create('li', '', this._tabsOverLayers);
    newTabContent = L.DomUtil.create('div', 'tab-pane fade', this._tabsContentOverLayers);
    $(newTabContent).attr('id', tab);
    this._tabsList[tab] = newTabContent;
    newTabName = L.DomUtil.create('a', 'tab-class', newTab);
    $(newTabName).attr('id', "tabLink" + tab);
    $(newTabName).attr('data-target', "#" + tab);
    $(newTabName).attr('data-toggle', 'tab');

    var content = obj.name  ? "<span>" + obj.name + "</span>": 
                  obj.url   ? "<img class='switch-tab-limit' src='" + obj.url +"'/>":
                              obj.icon;

    newTabName.innerHTML = '<div class="switch-control-tab switch-tab-limit">' + content + '</div>';

    if (obj.selected) {
      this._selectedTab = newTabName;
      this._selectedTabContent = newTabContent;
    }

    L.DomEvent.on(newTabName, "click", (function() {
      this._selectedTab = newTabName;
      return this._selectedTabContent = newTabContent;
    }), this);

    if (L.Browser.touch) {
      L.DomEvent.on(newTabName, "click", L.DomEvent.stop).on(newTabName, "click", this._activeTab, this).on(newTabName, "click", this._expand, this);
    }
  },

  _activeTab: function() {
    return $(this._selectedTab).trigger("click");
  },

  _addLayer: function(layer, name, overlayer, overlayControl, tab) {
    var id;
    id = L.stamp(layer);
    this._layers[id] = {
      layer: layer,
      name: name,
      overlayer: overlayer,
      overlayControl: overlayControl,
      tab: tab
    };

    if (this.options.autoZIndex && layer.setZIndex) {
      this._lastZIndex++;
      return layer.setZIndex(this._lastZIndex);
    }
  },

  _update: function() {
    var baseLayersPresent, i, obj, overlayersPresent, _results;

    if (!this._container) {
      return;
    }
    
    this._baseLayersList.innerHTML = "";
    this._overlayersList.innerHTML = "";
    
    if (this.options.enableTabs) {
      $.each(this._tabsList, function() {
        return $(this).html("");
      });
    }
    
    baseLayersPresent = false;
    overlayersPresent = false;
    _results = [];
    
    for (i in this._layers) {
      obj = this._layers[i];
      this._addItem(obj);
      overlayersPresent = overlayersPresent || obj.overlayer;
      baseLayersPresent = baseLayersPresent || !obj.overlayer;
    
      if (!this.options.enableTabs) {
        _results.push(this._separator.style.display = (overlayersPresent && baseLayersPresent ? "" : "none"));
      } else {
        _results.push(void 0);
      }
    }

    return _results;
  },

  _onLayerChange: function(e) {
    var obj, type;
    obj = this._layers[L.stamp(e.layer)];
    if (!obj) {
      return;
    }
    if (!this._handlingClick) {
      this._update();
    }
    type = (obj.overlayer ? (e.type === "layeradd" ? "overlayeradd" : "overlayerremove") : (e.type === "layeradd" ? "baselayerchange" : null));
    if (type) {
      return this._map.fire(type, obj);
    }
  },

  _addItem: function(obj) {
    var checked, container, control, controlgroup, input, label, name, slider, toggle, closeBtn;

    if (obj.overlayer) {
      if (this.options.enableTabs) {
        if (obj.tab) {
          container = this._tabsList[obj.tab];
        } else if (this.options.miscTabs) {
          container = this._tabsList[this.options.miscTabsName];
        }
      } else {
        container = this._overlayersList;
      }
    } else {
      container = this._baseLayersList;
    }
    
    controlgroup = L.DomUtil.create("div", "control-group", container);

    if (obj.overlayer && this.options.removable){
      closeBtn = L.DomUtil.create("a", "close-btn", controlgroup);
      closeBtn.setAttribute('title', obj.name);
      closeBtn.innerHTML = '<span>&times;</span>';

      L.DomEvent.addListener(closeBtn, "click", (function(e){
        L.DomEvent.stopPropagation(e);
        var layers = this._layers, layer;
        $.each(layers, function(value){
          if(layers[value].name == obj.name)
            layer = layers[value];
        })
        this.removeLayer(layer.layer);
        this._map.removeLayer(layer.layer);

      }), this);
    }
    
    checked = this._map.hasLayer(obj.layer);
    label = L.DomUtil.create("label", "control-label", controlgroup);
    
    if ((obj.name.length < 32 && !obj.overlayControl) || !obj.overlayControl) {
      if (obj.name.length > 32) {
        name = obj.name.substr(0, 32) + "…";
        label.innerHTML = "<div title=\"" + obj.name + "\">" + name + "</div>";
      } else {
        label.innerHTML = obj.name;
      }
    } else {
      if (obj.name.length > 30) {
        name = obj.name.substr(0, 12) + "…";
        label.innerHTML = "<div title=\"" + obj.name + "\">" + name + "</div>";
      } else {
        label.innerHTML = obj.name;
      }
      // name = obj.name.substr(0, 21) + "…";
      // label.innerHTML = "<abbr title=\"" + obj.name + "\">" + name + "</abbr>";
    }
    
    control = L.DomUtil.create("div", "control", controlgroup);
    toggle = L.DomUtil.create("div", "switch-small", control);
    input = L.DomUtil.create("input", "", toggle);
    
    if (obj.overlayer) {
      input.type = "checkbox";
      L.DomUtil.addClass(input, "switch-control-layers-selector");
    } else {
      input.type = "radio";
      $(input).attr("name", "leaflet-base-layers");
      $(input).attr("data-radio-all-off","false");
    }
    
    input.defaultChecked = checked;
    input.layerId = L.stamp(obj.layer);
    $(input).bootstrapSwitch({size:"mini"});
    
    if (!obj.overlayer)
      this._baseLayers.push({'input': input, 'obj': obj});

    $(input).on("switchChange.bootstrapSwitch", (function(_this) {
      return function(e, data) {
        if (!obj.overlayer) {
          return $.each(_this._baseLayers, function(key, value){
            _this._onInputClick(value.input, value.obj);  
          });
        } else {
          return _this._onInputClick(input, obj); 
        }
      };
    })(this));

    return controlgroup;
  },

  _onInputClick: function(input, obj) {
    this._handlingClick = true;

    if (input.checked && !this._map.hasLayer(obj.layer)) {
      this._map.addLayer(obj.layer);
    } else {
      if (!(input.checked && this._map.hasLayer(obj.layer))) {
        this._map.removeLayer(obj.layer);
      }
    }
    
    return this._handlingClick = false;
  },

  _expand: function() {
    L.DomUtil.addClass(this._form, "switch-control-layers-expanded");
  },

  _collapse: function() {
    this._form.className = this._form.className.replace(" switch-control-layers-expanded", "");
  }

});

L.control.switch = function (baseLayers, overlayers, tabs, options) {
  return new L.Control['Switch'](baseLayers, overlayers, tabs, options);
};